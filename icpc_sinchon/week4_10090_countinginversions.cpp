#include <iostream>
#include <algorithm>

using namespace std;
#define SIZE    1'000'000 + 1

int arr[SIZE];
int sorted[SIZE];

unsigned long long dnc(int left, int right) {
    // return solution of arr[left ~ right]
    // divide & conquer
    if(left >= right) return 0ull;
    
    int mid = (left+right)/2;
    unsigned long long ret = dnc(left, mid) + dnc(mid+1, right);
    int i, j = mid+1;
    
    // count inversions generated by (arr[i], arr[j])
    // with arr[i] in left array & arr[j] in right array
    // O(N)
    for(i = left; i <= mid; i++) {
        if(arr[i] <= arr[j]) continue;
        while(arr[i] > arr[j+1] && j < right) j++;
        ret += j-mid;
    }
    
    // merge left & right arrays
    i = left; j = mid+1;
    int k = left;
    while(i <= mid && j <= right) {
        if(arr[i] <= arr[j])
            sorted[k++] = arr[i++];
        else
            sorted[k++] = arr[j++];
    }
    if(j > right) {
        while(i <= mid)
            sorted[k++] = arr[i++];
    }
    else {
        while(j <= right)
            sorted[k++] = arr[j++];
    }
    
    // copy sorted[left~right] to arr[left~right]
    for(k = left; k <= right; k++) {
        arr[k] = sorted[k];
    }
    
    return ret;
}

int main( ) {
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    freopen("input.txt", "r", stdin);
    
    int n;
    unsigned long long ans;
    
    cin >> n;
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    
    ans = dnc(0, n-1);
    cout << ans << '\n';
    
    return 0;
}
